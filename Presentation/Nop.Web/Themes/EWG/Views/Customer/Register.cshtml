@model RegisterModel
@using Nop.Web.Models.Customer;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);

    ViewBag.IncludeSelectBox = true;
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}

<main class="white-bg relative">
    <div class="container">
        <div class="login-canvas">
            <img src="~/Themes/EWG/Content/ewg/img/man-left-2.png" alt="" class="content-image left-bottom hidden-sm hidden-md">
            <img src="~/Themes/EWG/Content/ewg/img/glasses-3.png" alt="" class="content-image right-center hidden-sm hidden-md">
            <div class="modal-window login-window">
                <div class="modal-window-content login-window-content">
                    <hgroup class="center">
                        <h1 class="main-title upper">register to eyewear glasses</h1>
                        <h3 class="subtitle v-bordered pad-v20">HAVE you AN ACCOUNT? PLEASE, <a href="#" class="underline cl-black">log in</a></h3>
                    </hgroup>

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        var validationSummary = Html.ValidationSummary(true);
                        if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                        {
                            <div class="message-error">@validationSummary</div>
                        }
                        @Html.Partial("_ExternalAuthentication.AssociateMessage")

                        <h3>@T("Account.YourPersonalDetails")</h3>
                        <hr class="thick-hr">

                        if (Model.GenderEnabled)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.Gender, new { @class = "label-default" })
                                @Html.DropDownListFor(model => model.Gender, new SelectList(new[] { new { Value = "M", Text = "Male" }, new { Value = "F", Text = "Female" } }, "Value", "Text"), new { @class = "form-control cstm-control" })
                                @Html.ValidationMessageFor(model => model.Gender)
                            </div>
                        }
                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, new { @class = "label-default" })
                            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control cstm-control" })
                            @Html.ValidationMessageFor(model => model.FirstName)
                        </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.LastName, new { @class = "label-default" })
                                @Html.TextBoxFor(model => model.LastName, new { @class = "form-control cstm-control" })
                                @Html.ValidationMessageFor(model => model.LastName)
                            </div>

                        if (Model.DateOfBirthEnabled)
                        {

                            <style>
                                .dp-bday select {
                                    float: left;
                                    width: 32% !important;
                                    margin-right: 5px;
                                }

                            </style>
                            <div class="form-group dp-bday">
                                <label class="label-default">@T("Account.Fields.DateOfBirth"):</label>
                                <br />
                                @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                            Html.FieldNameFor(x => x.DateOfBirthMonth),
                                            Html.FieldNameFor(x => x.DateOfBirthYear),
                                            DateTime.Now.Year - 110,
                                            DateTime.Now.Year,
                                            Model.DateOfBirthDay,
                                            Model.DateOfBirthMonth,
                                            Model.DateOfBirthYear, true, new { @class = "form-control cstm-control" })
                                @if (Model.DateOfBirthRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                                @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                                @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                                <div class="clearfix"></div>
                            </div>
                        }

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, new { @class = "label-default" })
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control cstm-control" })
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>

                        if (Model.UsernamesEnabled)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.Username, new { @class = "label-default" })
                                @Html.TextBoxFor(model => model.Username, new { @class = "form-control cstm-control" })
                                @Html.ValidationMessageFor(model => model.Username)
                                @if (Model.CheckUsernameAvailabilityEnabled)
                                {
                                    @Html.Partial("_CheckUsernameAvailability")
                                }
                            </div>
                        }
                        if (Model.CompanyEnabled || Model.DisplayVatNumber)
                        {

                            <h3>@T("Account.CompanyDetails")</h3>

                            if (Model.CompanyEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Company, new { @class = "label-default" })
                                    @Html.TextBoxFor(model => model.Company, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.Company)
                                </div>

                            }

                        }
                        if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled || Model.CityEnabled || Model.CountryEnabled)
                        {

                            <h3>@T("Account.YourAddress")</h3>
                            <hr class="thick-hr">

                            if (Model.StreetAddressEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.StreetAddress, new { @class = "label-default" })
                                    @Html.TextBoxFor(model => model.StreetAddress, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.StreetAddress)
                                </div>

                            }
                            if (Model.StreetAddress2Enabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.StreetAddress2, new { @class = "label-default" })
                                    @Html.TextBoxFor(model => model.StreetAddress2, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.StreetAddress2)
                                </div>
                            }
                            if (Model.ZipPostalCodeEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ZipPostalCode, new { @class = "label-default" })
                                    @Html.TextBoxFor(model => model.ZipPostalCode, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.ZipPostalCode)
                                </div>
                            }
                            if (Model.CityEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.City, new { @class = "label-default" })
                                    @Html.TextBoxFor(model => model.City, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.City)
                                </div>
                            }
                            if (Model.CountryEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CountryId, new { @class = "label-default" })
                                    @Html.DropDownListFor(model => model.CountryId, Model.AvailableCountries, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.CountryId)
                                </div>
                            }

                            if (Model.CountryEnabled && Model.StateProvinceEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.StateProvinceId, new { @class = "label-default" })
                                    @Html.DropDownListFor(model => model.StateProvinceId, Model.AvailableStates, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.StateProvinceId)
                                    <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                                </div>
                            }
                        }
                        if (Model.PhoneEnabled || Model.FaxEnabled)
                        {
                            <h3>@T("Account.YourContactInformation")</h3>
                            <hr class="thick-hr">

                            if (Model.PhoneEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Phone, new { @class = "label-default" })
                                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.Phone)
                                </div>

                            }
                            if (Model.FaxEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Fax, new { @class = "label-default" })
                                    @Html.TextBoxFor(model => model.Fax, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.Fax)
                                </div>
                            }
                        }
                        if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
                        {
                            <h3>@T("Account.Options")</h3>
                            <hr class="thick-hr">

                            if (Model.NewsletterEnabled)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Newsletter, new { @class = "label-default" })
                                    @Html.CheckBoxFor(model => model.Newsletter)
                                    @Html.ValidationMessageFor(model => model.Newsletter)
                                </div>

                            }
                            if (Model.CustomerAttributes.Count > 0)
                            {
                                @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                            }
                        }
                        if (Model.AllowCustomersToSetTimeZone)
                        {
                            <h3>@T("Account.Preferences")</h3>
                            <hr class="thick-hr">

                            if (Model.AllowCustomersToSetTimeZone)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TimeZoneId, new { @class = "label-default" })
                                    @Html.DropDownListFor(model => model.TimeZoneId, Model.AvailableTimeZones, new { @class = "form-control cstm-control" })
                                    @Html.ValidationMessageFor(model => model.TimeZoneId)
                                </div>

                            }
                        }

                        <h3>@T("Account.YourPassword")</h3>
                        <hr class="thick-hr">

                        if (Model.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }
                        if (Model.HoneypotEnabled)
                        {
                            @Html.Raw(Html.GenerateHoneypotInput())
                        }

                        <div>
                            <div class="row">
                                <div class="col-xs-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Password, new { @class = "label-default" })
                                        @Html.TextBoxFor(model => model.Password, new { @class = "form-control cstm-control" })
                                        @Html.ValidationMessageFor(model => model.Password)
                                    </div>
                                </div>
                                <div class="col-xs-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ConfirmPassword, new { @class = "label-default" })
                                        @Html.TextBoxFor(model => model.ConfirmPassword, new { @class = "form-control cstm-control" })
                                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                                    </div>
                                </div>
                            </div>
                            <hr class="thick-hr padless">

                            @if (Model.AcceptPrivacyPolicyEnabled)
                            {
                                <script type="text/javascript">
                                    $(document).ready(function () {
                                        $('#register-button').click(function () {
                                            if ($('#accept-privacy-policy').is(':checked')) {
                                                //do some stuff
                                                return true;
                                            }
                                            else {
                                                //just show validation errors, dont post
                                                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                                return false;
                                            }
                                        });
                                    });
                                </script>
                                <label class="checkbox-custom marg-bot-20">
                                    <input id="accept-privacy-policy" type="checkbox" name="accept-privacy-policy" />
                                    <span class="checkbox-custom_pseudo"></span>
                                    <span class="checkbox-custom_label">@T("Account.Fields.AcceptPrivacyPolicy.Content")</span>
                                </label>

                            }

                            <button type="submit"  id="register-button"  class="btn btn-sm btn-default button-1 register-next-step-button">@T("Account.Register.Button")</button>
                        </div>
                    }
                </div>


            </div>
        </div>
    </div>
</main>
<div class="clearfix">

</div>